@using System.Threading

<div class="d-flex flex-column border-primary alert col-md-6">
    <div class="d-flex justify-content-between align-items-center" style="height: 300px;">
        <img src="/next (5).png" style="transform: rotate(180deg);" @onclick="() => Manualy(true)"/>
        <div width="50%">            
            <img src="/Images/@Images[currentPosition]" class="imgcarousel"  alt="alt"/>
        </div>
        <img src="/next (5).png" @onclick="() => Manualy(false)"/>
    </div>
    <div class="d-flex justify-content-center">
        @foreach (var item in Images)
        {
            if(Math.Abs(currentPosition % Images.Length) == Array.IndexOf(Images, item))
            {
                <Thumb Type="alert-danger" SetCurrent="((k) => CallBck(Array.IndexOf(Images, item)))" />
            }
            else
            {
                <Thumb Type="alert-info" SetCurrent="((k) => CallBck(Array.IndexOf(Images, item)))" />
            }
        }
    </div>
</div>

@code {
    public void Manualy(bool backwards)
    {
        if (!cts.IsCancellationRequested)
            cts.Cancel();
        if (backwards)
            currentPosition--;
        else
            currentPosition++;
        if (currentPosition >= Images.Length) currentPosition = 0;
        if (currentPosition < 0) currentPosition = Images.Length - 1;
    }

    [Parameter]

    public string[] Images { get; set; }

    //public Type[] Components { get; set; }

    int currentPosition;
    CancellationTokenSource cts;
    CancellationToken ct;

    private async void CallBck(int k)
    {
        Console.WriteLine("CallBack called " + k.ToString());
        currentPosition = k;
        await InvokeAsync(() => this.StateHasChanged());

    }

    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        ct = cts.Token;
        Walkthrough();
    }
    public async Task Walkthrough()
    {
        while (!ct.IsCancellationRequested)
        {
            await Task.Delay(3500, ct);
            currentPosition++;
            await InvokeAsync(() => this.StateHasChanged());
        }
    }
    //public RenderFragment Render(int position)
    //{
    //    return RenderTreeBuilder =>
    //    {
    //        RenderTreeBuilder.OpenComponent(0, Components[Math.Abs(position % Components.Length)]);
    //        RenderTreeBuilder.CloseComponent();
    //    };
    //}
}
